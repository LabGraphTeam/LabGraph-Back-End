package leonardo.labutilities.qualitylabpro.services;

import leonardo.labutilities.qualitylabpro.dtos.analytics.GenericValuesRecord;
import leonardo.labutilities.qualitylabpro.dtos.analytics.GroupedValuesByLevel;
import leonardo.labutilities.qualitylabpro.entities.GenericAnalytics;
import leonardo.labutilities.qualitylabpro.repositories.GenericAnalyticsRepository;
import leonardo.labutilities.qualitylabpro.services.analytics.AnalyticsHelperService;
import leonardo.labutilities.qualitylabpro.utils.components.RulesValidatorComponent;
import leonardo.labutilities.qualitylabpro.utils.exception.CustomGlobalErrorHandling;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.test.context.ActiveProfiles;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

import static leonardo.labutilities.qualitylabpro.utils.AnalyticsHelperMocks.*;
import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@SpringBootTest
@ActiveProfiles("test")
class AnalyticsHelperServiceTests {

        @Mock
        private GenericAnalyticsRepository genericAnalyticsRepository;

        @Mock
        private RulesValidatorComponent rulesValidatorComponent;

        @Mock
        private AnalyticsHelperService analyticsHelperService;

        @BeforeEach
        void setUp() {
                MockitoAnnotations.openMocks(this);
                analyticsHelperService = new AnalyticsHelperService(genericAnalyticsRepository,
                                rulesValidatorComponent) {
                        @Override
                        public List<GenericValuesRecord> findAnalyticsByNameAndLevel(
                                        Pageable pageable, String name, String level) {
                                return genericAnalyticsRepository.findAllByNameAndLevel(pageable,
                                                name, level);
                        }

                        @Override
                        public List<GenericValuesRecord> findAllAnalyticsByNameAndLevelAndDate(
                                        String name, String level, LocalDateTime dateStart,
                                        LocalDateTime dateEnd) {
                                return genericAnalyticsRepository
                                                .findAllByNameAndLevelAndDateBetween(name, level,
                                                                dateStart, dateEnd,
                                                                PageRequest.of(0, 200));
                        }
                };
        }

        @Test
        void shouldValidateRulesProcessedByRulesValidatorComponent() {
                // Arrange: create sample input records
                List<GenericValuesRecord> records = createSampleRecordList();
                RulesValidatorComponent rulesValidatorComponent = new RulesValidatorComponent();

                // Act: convert the records to GenericAnalytics using the validation component
                List<GenericAnalytics> genericAnalytics = records.stream().map(
                                values -> new GenericAnalytics(values, rulesValidatorComponent))
                                .toList();

                // Assert: validate the rules generated by the component
                assertEquals(records.stream().map(GenericValuesRecord::rules).toList(),
                                genericAnalytics.stream().map(GenericAnalytics::getRules).toList(),
                                "The rules processed by the RulesValidatorComponent should match the input rules");
        }

        @Test
        void saveNewAnalyticsRecords_WithValidRecords_ShouldSaveSuccessfully() {
                List<GenericValuesRecord> records = createSampleRecordList();
                when(genericAnalyticsRepository.existsByDateAndLevelAndName(any(), any(), any()))
                                .thenReturn(false);
                when(genericAnalyticsRepository.saveAll(any())).thenReturn(null);

                assertDoesNotThrow(() -> analyticsHelperService.saveNewAnalyticsRecords(records));
                verify(genericAnalyticsRepository, times(1)).saveAll(any());
        }

        @Test
        void saveNewAnalyticsRecords_WithDuplicateRecords_ShouldThrowException() {
                List<GenericValuesRecord> records = createSampleRecordList();
                when(genericAnalyticsRepository.existsByDateAndLevelAndName(any(), any(), any()))
                                .thenReturn(true);

                assertThrows(CustomGlobalErrorHandling.DataIntegrityViolationException.class,
                                () -> analyticsHelperService.saveNewAnalyticsRecords(records));
                verify(genericAnalyticsRepository, never()).saveAll(any());
        }

        @Test
        void findById_WithValidId_ShouldReturnRecord() {
                Long id = 1L;
                GenericAnalytics analytics = new GenericAnalytics();
                when(genericAnalyticsRepository.findById(id)).thenReturn(Optional.of(analytics));

                GenericAnalytics result = analyticsHelperService.findById(id);

                assertNotNull(result);
                assertEquals(analytics, result);
        }

        @Test
        void findById_WithInvalidId_ShouldThrowException() {
                Long id = 999L;
                when(genericAnalyticsRepository.findById(id)).thenReturn(Optional.empty());

                assertThrows(CustomGlobalErrorHandling.ResourceNotFoundException.class,
                                () -> analyticsHelperService.findById(id));
        }

        @Test
        void findAnalyticsByNameAndLevel_WithFilters_ShouldReturnFilteredRecords() {
                String name = "Glucose";
                String level = "Normal";
                Pageable pageable = PageRequest.of(0, 10);
                List<GenericValuesRecord> expectedRecords = createSampleRecordList().stream()
                                .filter(r -> r.name().equals(name) && r.level().equals(level))
                                .toList();

                when(genericAnalyticsRepository.findAllByNameAndLevel(pageable, name, level))
                                .thenReturn(expectedRecords);

                List<GenericValuesRecord> result = analyticsHelperService
                                .findAnalyticsByNameAndLevel(pageable, name, level);

                assertEquals(expectedRecords.size(), result.size());
                verify(genericAnalyticsRepository).findAllByNameAndLevel(pageable, name, level);
        }

        @Test
        void findAllAnalyticsByNameAndLevelAndDate_WithDateRange_ShouldReturnFilteredRecords() {
                String name = "Glucose";
                String level = "Normal";
                LocalDateTime startDate = LocalDateTime.of(2024, 1, 1, 0, 0);
                LocalDateTime endDate = LocalDateTime.of(2024, 1, 2, 0, 0);
                List<GenericValuesRecord> expectedRecords = createDateRangeRecords();

                when(genericAnalyticsRepository.findAllByNameAndLevelAndDateBetween(eq(name),
                                eq(level), eq(startDate), eq(endDate), any(Pageable.class)))
                                                .thenReturn(expectedRecords);

                List<GenericValuesRecord> result =
                                analyticsHelperService.findAllAnalyticsByNameAndLevelAndDate(name,
                                                level, startDate, endDate);

                assertNotNull(result);
                assertEquals(expectedRecords.size(), result.size());
        }

        @Test
        void deleteAnalyticsById_WithValidId_ShouldDelete() {
                Long id = 1L;
                when(genericAnalyticsRepository.existsById(id)).thenReturn(true);
                doNothing().when(genericAnalyticsRepository).deleteById(id);

                assertDoesNotThrow(() -> analyticsHelperService.deleteAnalyticsById(id));

                verify(genericAnalyticsRepository).deleteById(id);
        }

        @Test
        void deleteAnalyticsById_WithInvalidId_ShouldThrowException() {
                Long id = 999L;
                when(genericAnalyticsRepository.existsById(id)).thenReturn(false);

                assertThrows(CustomGlobalErrorHandling.ResourceNotFoundException.class,
                                () -> analyticsHelperService.deleteAnalyticsById(id));
                verify(genericAnalyticsRepository, never()).deleteById(id);
        }

        @Test
        void ensureNameExists_WithValidName_ShouldNotThrowException() {
                String name = "Glucose";
                when(genericAnalyticsRepository.existsByName(name.toUpperCase())).thenReturn(true);

                assertDoesNotThrow(() -> analyticsHelperService.ensureNameExists(name));
        }

        @Test
        void ensureNameExists_WithInvalidName_ShouldThrowException() {
                String name = "NonExistentTest";
                when(genericAnalyticsRepository.existsByName(name.toUpperCase())).thenReturn(false);

                assertThrows(CustomGlobalErrorHandling.ResourceNotFoundException.class,
                                () -> analyticsHelperService.ensureNameExists(name));
        }

        @Test
        void ensureNameNotExists_WithInvalidName_ShouldThrowException() {
                String name = "Glucose";
                when(genericAnalyticsRepository.existsByName(name.toUpperCase())).thenReturn(false);

                CustomGlobalErrorHandling.ResourceNotFoundException exception = assertThrows(
                                CustomGlobalErrorHandling.ResourceNotFoundException.class,
                                () -> analyticsHelperService.ensureNameExists(name));

                assertEquals("Analytics by name not found", exception.getMessage());
        }

        @Test
        void isAnalyticsNonExistent_WithNonExistentRecord_ShouldReturnTrue() {
                GenericValuesRecord record = createSampleRecord();
                when(genericAnalyticsRepository.existsByDateAndLevelAndName(record.date(),
                                record.level(), record.name())).thenReturn(false);

                boolean result = analyticsHelperService.isAnalyticsNonExistent(record);

                assertTrue(result);
        }

        @Test
        void isAnalyticsNonExistent_WithExistentRecord_ShouldReturnFalse() {
                GenericValuesRecord record = createSampleRecord();
                when(genericAnalyticsRepository.existsByDateAndLevelAndName(record.date(),
                                record.level(), record.name())).thenReturn(true);

                boolean result = analyticsHelperService.isAnalyticsNonExistent(record);

                assertFalse(result);
        }

        @Test
        void findGroupedAnalyticsByLevel_WithValidInputs_ShouldReturnGroupedRecords() {
                String name = "Glucose";
                LocalDateTime startDate = LocalDateTime.of(2024, 1, 1, 0, 0);
                LocalDateTime endDate = LocalDateTime.of(2024, 1, 2, 0, 0);
                List<GenericValuesRecord> records = createSampleRecordList();

                when(genericAnalyticsRepository.findAllByNameAndDateBetweenGroupByLevel(eq(name),
                                eq(startDate), eq(endDate), any(Pageable.class)))
                                                .thenReturn(records);

                List<GroupedValuesByLevel> result = analyticsHelperService
                                .findGroupedAnalyticsByLevel(name, startDate, endDate);

                assertNotNull(result);
                assertFalse(result.isEmpty());
                verify(genericAnalyticsRepository).findAllByNameAndDateBetweenGroupByLevel(eq(name),
                                eq(startDate), eq(endDate), any(Pageable.class));
        }
}
